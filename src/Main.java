public class Main {
    public static void main(String[] args) {
//        Задачи на первую неделю:
//        1. Создать новый проект
//        2. Создать новый репозиторий на гитхабе, связанный с этим проектом
//        3. Создать 4 модели авто: camry (легковой авто), solara (кабриолет), hiance (грузовой фургон), dyna
//        (грузовой фургон)
//        Для всех машин характерны следующие атрибуты: цвет, максимальная скорость, тип коробки передач (акпп,
//        механика, робот), в состоянии движения (да/нет).
//                Машины состоят из следующих компонентов: 4 колеса, бензобак, двигатель, электрика, фары
//        Каждое колесо имеет состояние - проколото или нет, диаметр (camry - 17, solara - 16, hiance - 20, dyna - 20).
//        Колеса могуть быть заменяемы если они одинакового диаметра.
//        Бензобак имеет атрибут - количество бензина
//        Двигатель имеет атрибут - работоспособен
//        Электрика имеет атрибут - работоспособна
//        Фары имеют атрибут - работоспособны
//        Цена - с центами
//
//        Для всех машин характерны следующие функции:
//        Начать движение - меняет состояние движения. Начать движение возможно только при: наличии всех колес и они
//        не проколоты,
//        непустом бензобаке, работоспособным электрике и двигателю. Если что то из этого невыполняется,
//        то выкидывается ошибка abstractCars.StartCarException, в сообщении которой содержится причина невозможности
//        движения.
//        Остановить движение - меняет состояние движения. Для остановки не нужно условий.
//                Включить фары - сообщает о работе фар.
//
//                Для легковых авто характерно наличие круиз контроля, и возможности включить или выключить его.
//                Для кабриолета характерно возможность опустить или поднять крышу ( следовательно и состояние этой
//                крыши)
//        Для грузового фургона есть дополнительный параметр - грузоподъемность (количество килограмм)
//
//        Для модели camry характерно наличие usb (функция подключить музыку)
//        Для модели solara характерно наличие мини холодильника (функция охладить напиток)
//        Для модели hiance характерно наличие запасного колеса
//        Для модели dyna характерно наличие розетки (функция зарядить телефон)
//
//        4. Необходимо создать класс Runner и в нем создать все модели, и проверить работоспособность всех методов.
//        5. Отправить весь код в репозиторий и скинуть мне в личку ссылку.
//        -----------------------------------------------------------

//        Задание №2
//        Мы с вами создали машины, их детали, описали действия. Но создавать машины сейчас крайне неудобно: нам
//        приходиться самим создавать детали, передавать их в конструктор. А ведь менеджеру нужно только установить
//        цену машины и ее цвет!
//                Необходимо:
//        1. Реализовать фабрику производств деталей - класс, в котором будут методы создающие все наши детали в
//        работоспособном состоянии, (бензобак должен быть пустой). У завода должнен быть атрибут - страна( ведь
//        заводов может быть много). Подумать, какой тип данных у атрибута Страна.

//        2. Реализовать сборочный конвеер - класс, который будет использовать фабрику производств и отдавать нам
//        готовые машины. Например должен быть метод, который принимает в себя два параметра - цвет и цену, а
//        возвращает новую Camry. Необходимо создать 4 метода, которые будут создавать все наши модели: createCamry,
//        createSolara, createHiance, createDyna. Сборочный конвеер может пользоваться только той фабрикой
//        производств, которая находится в той же стране (Подумать где должна происходить эта проверка). Иначе должна
//        появляться ошибка: CountyFactoryNotEqualException - в описании ошибки должны описаться страны которые не
//        совпали.
//-------------------------------------------------------------------
//        Задание №3
//        Мы с вами продвинулись в создании машин, но машины должны где то храниться!
//                Для этого нам потребуется создать склад машин. Каждый склад может хранить в себе до 1000 машин
//                разных типов.
//                Поэтому необходимо:
//        1. Создать новый класс склад. Который имеет количество машин при создании - 0.
//        2. Создать в нем переменные, которые будут отвечать за хранение конкретного типа машин.
//        3. Создать методы добавления машин по каждому типу в переменные из шага два. При добавлении машины,
//        свободное место на складе должно уменьшаться.
//        4. Создать методы взятия машин со склада: общий счетчик уменьшается на 1, а в переменной ответственной за
//        хранение машины определенной модели должна быть удалена конкретная машина. Методы возвращают экземпляр модели.
//        5. Написать методы, которые будут показывать количество машин по каждой модели.
//        6. Расширить абстрактный класс Car, добавив атрибут Country (страна сборки). При сборке машины указать ее
//        страну.
//        Внимание! Запрещено использовать arrayList. Только массивы.
    }
}
